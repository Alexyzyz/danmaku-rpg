[gd_scene load_steps=4 format=3 uid="uid://cyfbqmnior0jq"]

[ext_resource type="Texture2D" uid="uid://dkfvfmk8mtabn" path="res://sprites/bullets/spr_bullet_0_dropshadow.png" id="2_yumyv"]
[ext_resource type="Texture2D" uid="uid://cgbmwjoy8kl3e" path="res://sprites/bullets/spr_bullet_0.png" id="3_oubs7"]

[sub_resource type="GDScript" id="GDScript_bkkqj"]
script/source = "class_name BattleBullet
extends Node2D

const HITBOX_RADIUS: float = 2

var color: Color
var movement: MovementData = MovementData.new()
var sprite_has_direction: bool = false

var has_been_grazed: bool = false
var graze_modulate_t: float

var sp_manager: SpatialPartitioningManager
var sp_cell_prev: BattleBullet
var sp_cell_next: BattleBullet
var sp_last_cell: Vector2i
var last_position: Vector2

var debug_play: bool = true
var debug_cell: Vector2i

@onready var child_sprite: Sprite2D = $Sprite
@onready var child_sprite_dropshadow: Sprite2D = $DropShadow

# Main methods

func _process(delta):
	if !BattleManager._debug_play:
		return
	
	_move(delta)
	_handle_graze_animation()

# Public methods

func set_up(
	# Mandatory
	p_position: Vector2,
	p_direction: float,
	p_speed: float,
	# Optional
	p_color: Color = Color.WHITE,
	p_bullet_resource: BulletResource = UtilBulletResource.default,
	p_has_direction: bool = true):
	
	movement.position = p_position
	movement.direction_angle = p_direction
	movement.speed = p_speed
	position = p_position
	
	_set_up_sprites(p_bullet_resource.sprite, p_bullet_resource.dropshadow_sprite, p_color, p_has_direction)

func disable():
	set_process(false)
	child_sprite.visible = false
	child_sprite_dropshadow.visible = false
	movement.reset()

func enable():
	set_process(true)
	child_sprite.visible = true
	child_sprite_dropshadow.visible = true

func graze():
	graze_modulate_t = 1

func destroy():
	sp_manager.handle_destroyed_obj(self)

func get_rect():
	return Rect2(
		position.x - HITBOX_RADIUS,
		position.y - HITBOX_RADIUS,
		position.x + HITBOX_RADIUS,
		position.y + HITBOX_RADIUS)

func get_rect_midway_pos():
	var midway_pos: Vector2 = (position - last_position) / 2
	return Rect2(
		midway_pos.x - HITBOX_RADIUS,
		midway_pos.y - HITBOX_RADIUS,
		midway_pos.x + HITBOX_RADIUS,
		midway_pos.y + HITBOX_RADIUS)

# Private methods

func _move(delta: float):
	last_position = movement.position
	movement.update(delta)
	# _move_wrap_around_screen()
	# _move_bounce_on_screen()
	
	if sp_manager != null:
		sp_manager.update_sp_grid(self, movement.position)
		debug_cell = sp_manager.get_cell(position)
	
	position = movement.position
	rotation = movement.direction_angle + PI / 2

func _move_wrap_around_screen():
	if movement.position.x < BattleManager.battle_area_west_x:
		movement.position.x = BattleManager.battle_area_east_x - 8
	elif movement.position.x > BattleManager.battle_area_east_x:
		movement.position.x = BattleManager.battle_area_west_x + 8
	
	if movement.position.y > BattleManager.battle_area_south_y:
		movement.position.y = BattleManager.battle_area_north_y + 8
	elif movement.position.y < BattleManager.battle_area_north_y:
		movement.position.y = BattleManager.battle_area_south_y - 8

func _move_bounce_on_screen():
	if movement.position.x < BattleManager.battle_area_west_x or \\
		movement.position.x > BattleManager.battle_area_east_x:
		movement.position.x = clamp(movement.position.x, BattleManager.battle_area_west_x, BattleManager.battle_area_east_x)
		movement.direction.x *= -1
	
	if movement.position.y > BattleManager.battle_area_south_y or \\
		movement.position.y < BattleManager.battle_area_north_y:
		movement.position.y = clamp(movement.position.y, BattleManager.battle_area_north_y, BattleManager.battle_area_south_y)
		movement.direction.y *= -1

func _handle_graze_animation():
	child_sprite.modulate = Color(1, 1, 1) - graze_modulate_t * 0.1 * Color(1, 1, 1)
	if graze_modulate_t < 0.01:
		graze_modulate_t = 0
		return
	graze_modulate_t = lerpf(graze_modulate_t, 0, 0.2)

func _set_up_sprites(
	p_sprite: Resource,
	p_sprite_dropshadow: Resource,
	p_color: Color,
	p_has_direction: bool = true):
	
	child_sprite.texture = p_sprite
	child_sprite.self_modulate = p_color
	child_sprite_dropshadow.texture = p_sprite_dropshadow
	sprite_has_direction = p_has_direction
	
	color = p_color
"

[node name="Bullet" type="Node2D"]
script = SubResource("GDScript_bkkqj")

[node name="DropShadow" type="Sprite2D" parent="."]
visible = false
self_modulate = Color(0, 0, 0, 1)
texture_filter = 1
texture = ExtResource("2_yumyv")

[node name="Sprite" type="Sprite2D" parent="."]
z_index = 1
texture_filter = 1
texture = ExtResource("3_oubs7")
